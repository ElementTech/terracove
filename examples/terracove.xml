<testsuites>
	<testsuite name="." time="1.9429973889999999" failures="2" tests="4">
		<testcase name="examples/terragrunt/no-resources" time="1.3173048889999999" classname="">
			<skipped message="module does not contain any resources">&#xA;�[0m�[1mInitializing the backend...�[0m&#xA;&#xA;�[0m�[1mInitializing provider plugins...�[0m&#xA;&#xA;�[0m�[1m�[32mTerraform has been successfully initialized!�[0m�[32m�[0m&#xA;�[0m�[32m&#xA;You may now begin working with Terraform. Try running &#34;terraform plan&#34; to see&#xA;any changes that are required for your infrastructure. All Terraform commands&#xA;should now work.&#xA;&#xA;If you ever set or change modules or backend configuration for Terraform,&#xA;rerun this command to reinitialize your working directory. If you forget, other&#xA;commands will detect it and remind you to do so if necessary.�[0m&#xA;&#xA;Changes to Outputs:&#xA;  �[32m+�[0m�[0m output = &#34;one input another input&#34;&#xA;&#xA;You can apply this plan to save these new output values to the Terraform&#xA;state, without changing any real infrastructure.&#xA;�[90m&#xA;─────────────────────────────────────────────────────────────────────────────�[0m&#xA;&#xA;Saved the plan to: .terracove.plan&#xA;&#xA;To perform exactly these actions, run the following command to apply:&#xA;    terraform apply &#34;.terracove.plan&#34;</skipped>
			<properties>
				<property name="total" value="0"></property>
				<property name="diff" value="0"></property>
				<property name="delete" value="0"></property>
				<property name="update" value="0"></property>
				<property name="read" value="0"></property>
				<property name="create" value="0"></property>
				<property name="noop" value="0"></property>
				<property name="coverage" value="100"></property>
			</properties>
		</testcase>
		<testcase name="examples/terragrunt/error" time="1.880412659" classname="">
			<error message="module has planning error" type="">FatalError{Underlying: error while running command: exit status 1; �[31m╷�[0m�[0m&#xA;�[31m│�[0m �[0m�[1m�[31mError: �[0m�[0m�[1mReference to undeclared input variable�[0m&#xA;�[31m│�[0m �[0m&#xA;�[31m│�[0m �[0m�[0m  on main.tf line 4, in output &#34;output&#34;:&#xA;�[31m│�[0m �[0m   4:   value = &#34;${var.input} ${�[4mvar.other_input�[0m}&#34;�[0m&#xA;�[31m│�[0m �[0m&#xA;�[31m│�[0m �[0mAn input variable with the name &#34;other_input&#34; has not been declared. This&#xA;�[31m│�[0m �[0mvariable can be declared with a variable &#34;other_input&#34; {} block.&#xA;�[31m╵�[0m�[0m&#xA;time=2023-04-11T18:43:57+03:00 level=error msg=Terraform invocation failed in /Users/amitai.getzler/Desktop/Explorium/projects/terracove/examples/terragrunt/error&#xA;time=2023-04-11T18:43:57+03:00 level=error msg=1 error occurred:&#xA;&#x9;* exit status 1&#xA;&#xA;}</error>
			<properties>
				<property name="total" value="0"></property>
				<property name="diff" value="0"></property>
				<property name="delete" value="0"></property>
				<property name="update" value="0"></property>
				<property name="read" value="0"></property>
				<property name="create" value="0"></property>
				<property name="noop" value="0"></property>
				<property name="coverage" value="0"></property>
			</properties>
		</testcase>
		<testcase name="examples/terraform/success" time="1.935250789" classname="">
			<properties>
				<property name="total" value="2"></property>
				<property name="diff" value="0"></property>
				<property name="delete" value="0"></property>
				<property name="update" value="0"></property>
				<property name="read" value="0"></property>
				<property name="create" value="0"></property>
				<property name="noop" value="2"></property>
				<property name="coverage" value="100"></property>
			</properties>
		</testcase>
		<testcase name="examples/terraform/tfstate-diff" time="1.9429973889999999" classname="">
			<failure message="module has 1 resources with diff" type="">�[0m�[1mlocal_file.example: Refreshing state... [id=943a702d06f34599aee1f8da8ef9f7296031d699]�[0m&#xA;&#xA;Terraform used the selected providers to generate the following execution&#xA;plan. Resource actions are indicated with the following symbols:&#xA;  �[32m+�[0m create�[0m&#xA;&#xA;Terraform will perform the following actions:&#xA;&#xA;�[1m  # local_file.example2�[0m will be created&#xA;�[0m  �[32m+�[0m�[0m resource &#34;local_file&#34; &#34;example2&#34; {&#xA;      �[32m+�[0m�[0m content              = &#34;I am not applied :(&#34;&#xA;      �[32m+�[0m�[0m content_base64sha256 = (known after apply)&#xA;      �[32m+�[0m�[0m content_base64sha512 = (known after apply)&#xA;      �[32m+�[0m�[0m content_md5          = (known after apply)&#xA;      �[32m+�[0m�[0m content_sha1         = (known after apply)&#xA;      �[32m+�[0m�[0m content_sha256       = (known after apply)&#xA;      �[32m+�[0m�[0m content_sha512       = (known after apply)&#xA;      �[32m+�[0m�[0m directory_permission = &#34;0777&#34;&#xA;      �[32m+�[0m�[0m file_permission      = &#34;0777&#34;&#xA;      �[32m+�[0m�[0m filename             = &#34;./not_applied.txt&#34;&#xA;      �[32m+�[0m�[0m id                   = (known after apply)&#xA;    }&#xA;&#xA;�[1mPlan:�[0m 1 to add, 0 to change, 0 to destroy.&#xA;�[0m�[90m&#xA;─────────────────────────────────────────────────────────────────────────────�[0m&#xA;&#xA;Saved the plan to: .terracove.plan&#xA;&#xA;To perform exactly these actions, run the following command to apply:&#xA;    terraform apply &#34;.terracove.plan&#34;</failure>
			<properties>
				<property name="total" value="2"></property>
				<property name="diff" value="1"></property>
				<property name="delete" value="0"></property>
				<property name="update" value="0"></property>
				<property name="read" value="0"></property>
				<property name="create" value="1"></property>
				<property name="noop" value="1"></property>
				<property name="coverage" value="50"></property>
			</properties>
		</testcase>
	</testsuite>
</testsuites>